datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participant_on Participant[]
  groups_owns    Group[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum ParticipantRole {
  ADMIN
  OWNER
  MEMBER
}

model Participant {
  id        String          @id @default(cuid())
  createdAt DateTime        @default(now())
  role      ParticipantRole @default(MEMBER)

  chosenId String?      @unique
  chosen   Participant? @relation("ParticipantRelation", fields: [chosenId], references: [id])

  chosenBy Participant? @relation("ParticipantRelation")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@index([userId, groupId])
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Invite {
  id           String       @id @default(cuid())
  status       InviteStatus @default(PENDING)
  invitedEmail String       @map("invited_email")

  createdAt DateTime @default(now())

  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

enum GroupStatus {
  WAITING
  STARTED
  FINISHED
}

model Group {
  id     String      @id @default(cuid())
  name   String
  bio    String?
  date   DateTime?
  status GroupStatus @default(WAITING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  participants Participant[]
  invites      Invite[]
}
